export { groupSort } from "./utils";

import fs  from 'fs';
import { DocspecTransformer } from "./transformation";
import { DocspecObject } from "./types";
import { findNearestInParent, getCurrentPackageName, getPackageGitHubTags } from "./packageVersions";

import childProcess from 'child_process';
import path from 'path';

/**
 * Processes the Python documentation generated by `pydoc-markdown` and transforms it into a format
 * accepted by the TypeDoc JSON generator.
 */
export function processPythonDocs(
    {
        pythonModulePath,
        moduleShortcutsPath,
        outPath,
    } : { 
    pythonModulePath: string,
    moduleShortcutsPath: string, 
    outPath: string 
}) {

    const pydocMarkdownDumpPath = path.join(__dirname, './pydoc-markdown-dump.json');

    childProcess.spawnSync('python', [
        path.join(__dirname, './docspec-gen/generate_ast.py'),
        '-i', pythonModulePath,
        pydocMarkdownDumpPath,
    ]);
    
    const githubTags = getPackageGitHubTags(['apify', 'apify_client', 'apify_shared']);

    let currentPackage = 'UNNAMED';
    try {
        const pyprojectTomlPath = findNearestInParent(pythonModulePath, 'pyproject.toml');

        currentPackage = getCurrentPackageName(pyprojectTomlPath);
    } catch (e) {
        console.warn(e);
    }

    githubTags[currentPackage] = 'master';

    const moduleShortcuts = JSON.parse(
        fs.readFileSync(moduleShortcutsPath, 'utf8')
    );
    
    const pydocMarkdownDump = JSON.parse(
        fs.readFileSync(pydocMarkdownDumpPath, 'utf8')
    ) as DocspecObject[];

    const docspecTransformer = new DocspecTransformer({
        moduleShortcuts,
        githubTags: githubTags,
    });

    const typedocApiReference = docspecTransformer.transform(pydocMarkdownDump);

    fs.writeFileSync(outPath, JSON.stringify(typedocApiReference, null, 4));
}